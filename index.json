[{"content":"The remote development feature allows you to use IDE or code editor on a remote machine. All that local machine needs is a client that draws interface, sends, and receives data, like a browser.\nVSCode was the first to introduce this feature. Things are much easier for VSCode since it\u0026rsquo;s a code editor built on electron, while for example, IntelliJ IDEA is an IDE and uses Java Swing library for UI.\nIn Autumn 2022, JetBrains also caught this trend and announced a remote development feature for its products and a completely new IDE built up from scratch that also supports this feature.\nRemote development is a fast-growing trend right now, and there are reasons for it. I\u0026rsquo;ve tested it for IntelliJ IDEA and was inspired by the number of advantages remote development gives. Even though this feature is still in beta and bugs appear from time to time, it\u0026rsquo;s totally worth it to try.\nLet\u0026rsquo;s now look at all the advantages remote developing gives to software developers and companies.\nNo need for powerful laptops anymore No need to upgrade the laptops of employees every 2-3 years. Cheaper alternatives could be bought i.e. Macbook Air instead of Macbook Pro. Even Raspberry Pi could be used!\nNot only does it reduce the cost of equipment but also allows choosing battery capacity over CPU performance.\nLonger battery life for a laptop Using IDE or code editor with remote development feature is like using a browser in terms of resources consumption. There\u0026rsquo;s nothing but front-end, all the computations are made on a remote machine. This also means that the laptop won\u0026rsquo;t get hot and loud because of compilation or running tests.\nThe same environment for every developer Did you encounter a problem where you have code pointing at the same commit, but it only works for you and not your colleague?\nNot going to lie: for most of the time, the platform-specific behavior of testcontainers library was the reason. Still, it\u0026rsquo;s a very unpleasant and hard-to-debug problem.\nWith remote development, this problem is solved by keeping the same environment on virtual machines.\nCross-platform solution Developers won\u0026rsquo;t be limited in choosing preferable devices anymore.\nSoftware development using iPad with a keyboard? Not a problem anymore!\nPC on Windows at home is able to become a work tool in just a few minutes.\nReduction of costs by using cloud infrastructure Big tech companies are able to use the advantages of cloud infrastructure.\nSince they have developers distributed around the globe, it means that remote machines\u0026rsquo; resources usage is distributed in time, therefore not so many resources are used simultaneously.\nIf there\u0026rsquo;s a need to have more CPU/RAM, then virtual machines can easily be scaled in a cloud.\nCode is not stored on disk locally The risk of code leakage is reduced, and it might be an important advantage for a company.\nLocality of data Big tech companies might have their own docker registry or artifact repository like Artifactory. Having your virtual machine in the same data center would mean almost instant download and upload of libraries and docker images.\nFaster onboarding Since everything is stored on a virtual machine, the environment can be prepared in advance to reduce onboarding time significantly.\nI\u0026rsquo;m really satisfied with where the new era of IDEs is going.\nThe only disadvantage I see is an inability to work without the Internet which is not important to me.\nHope that you\u0026rsquo;ll like remote development too!\nLinks: VSCode Remote Development\nRemote Development for JetBrains products\nJetBrains Remote Development announcement post\n","permalink":"https://awethon.github.io/posts/remote-development-is-future/","summary":"The remote development feature allows you to use IDE or code editor on a remote machine. All that local machine needs is a client that draws interface, sends, and receives data, like a browser.\nVSCode was the first to introduce this feature. Things are much easier for VSCode since it\u0026rsquo;s a code editor built on electron, while for example, IntelliJ IDEA is an IDE and uses Java Swing library for UI.","title":"Remote development is a future of big tech"},{"content":"The wrapper pattern (or the proxy pattern) is a useful way of adding extra logic to the methods of a class without changing it. It might be handy in scenarios where an application needs to be heavily instrumented and putting all the instrumentation in business logic will make code less readable. To be more specific, wrappers are useful for logging, metering, and tracing, but not limited to it. For example, it might be useful to set timeouts and retries in wrappers. However, transforming arguments or return value in a wrapper is considered to be an anti-pattern.\nScala is a great language with many features and a complex type system. Thus, it provides many ways to create wrappers, but not all of them will fit well in your application.\nTrait mixin One of the possible ways to create a wrapper is the trait mixin and abstract override techniques. Scala has a sophisticated mechanism of dynamic class composition (inheritance, technically speaking) that allows to build a class from pieces (traits). While abstract override allows a trait to inherit another trait and to provide the implementation of a method that is able to call implementation from parent.\nMechanism explanation\rSounds difficult but in fact it is easy to understand. // Our interface trait Printer { def print(): Unit } // Sub-trait of Printer that overrides print // and makes a call of a parent class implementation // without any knowledge of what parent it is going to be. // Thus, `abstract` keyword is needed. trait PrinterButCooler extends Printer { abstract override def print(): Unit = { printf(\u0026#34;Hello \u0026#34;) super.print() printf(\u0026#34;!\u0026#34;) } } // Implementation of Printer interface class PrinterImpl() extends Printer { override def print() = printf(\u0026#34;World\u0026#34;) } new PrinterImpl().print() // Output: World // PrinterImpl becomes a super-class for PrinterButCooler (new PrinterImpl() with PrinterButCooler).print() // Output: Hello World! Using this mechanism, it's possible to compose many trait mixins together, and that's exactly what we need for our wrappers. Let\u0026rsquo;s introduce a simple dao interface - ItemDao. trait ItemDao { def upsert(item: Item): Unit def get(id: Id): Option[Item] } As an example, we\u0026rsquo;ll write logging of ItemDao methods, for that we need to create trait that extends ItemDao and override its methods with abstract modifier (see explanation above). trait LoggedItemDaoWrapper extends ItemDao with StrictLogging { abstract override def upsert(item: Item): Unit = { logger.info(s\u0026#34;upsert($item) is called\u0026#34;) super.upsert(item) logger.info(s\u0026#34;upsert($item) = ()\u0026#34;) } abstract override def get(id: Id): Option[Item] = { logger.info(s\u0026#34;get($id) is called\u0026#34;) val result = super.get(id) logger.info(s\u0026#34;get($id) = $result\u0026#34;) } } Then, we should initialize a class that implements ItemDao interface and add the wrapper we made into it. new ItemDaoImpl(...) extends LoggedItemDaoWrapper So far it looks clean and seems easy to understand. Unfortunately, code is going to become messy if there are dependencies to provide.\nTo show that, let\u0026rsquo;s make our trait return Future values: trait ItemDao { def upsert(item: Item): Future[Unit] def get(id: Id): Future[Option[Item]] } If a trait has an interface that returns Future, then ExecutionContext must be provided to our wrappers to be able to call map, flatMap, and other methods.\nMany developers create global single thread execution context to keep things simple, but let\u0026rsquo;s pretend I didn\u0026rsquo;t say that.\ntrait LoggedItemDaoWrapper extends ItemDao with StrictLogging { protected implicit def ec: ExecutionContext abstract override def upsert(item: Item): Future[Unit] = { super.upsert(item).map(_ =\u0026gt; logger.info(s\u0026#34;upsert($item) = ()\u0026#34;)) } abstract override def get(id: Id): Future[Option[Item]] = { super.get(id).map(result =\u0026gt; logger.info(s\u0026#34;get($id) = $result\u0026#34;)) } } val itemDao: ItemDao = new ItemDaoImpl(...) extends LoggedItemDaoWrapper { override def ec = yourEc } The code of initialization is not as clear as before because ExecutionContext has to be provided through the override def mechanism. Initialization order has to be kept in mind because it\u0026rsquo;s possible to get NullPointerException there.\nThe more dependencies are stacked together the worse the code looks.\nIt becomes even worse with Tagless Final. When we write wrappers using TF we want to keep the granularity of type classes, but when it comes to initialization, we\u0026rsquo;re doomed because different wrappers require different type class instances to be provided and we can only provide them by creating functions and overriding them in initialization code.\nHere\u0026rsquo;s an example of what TF code might look like: trait ItemDao[F[_]] { def upsert(item: Item): F[Unit] def get(id: Id): F[Option[Item]] } trait LoggedItemDaoWrapper[F[_]] extends ItemDao[F] with StrictLogging { implicit protected def mt: MonadThrow[F] abstract override def upsert(item: Item): F[Unit] = { super.upsert(item).attemptTap(...) } abstract override def get(id: Id): F[Option[Item]] = { super.get(id).attemptTap(...) } } val itemDao: ItemDao[F] = new ItemDaoImpl[F](...) extends LoggedItemDaoWrapper[F] with MeteredItemDaoWrapper[F] with TimeoutItemDaoWrapper[F] { override def mt: MonadThrow[F] = async override def at: ApplicativeError[F] = async override def concurrent: Concurrent[F] = async override def timer: Timer[F] = _timer override def gauge: Gauge = methodCallGauge } In order to reduce the amount of boilerplate and to make sure that the same dependencies have the same names, type class provider traits have to be implemented. trait MonadThrowProvider[F[_]] extends ApplicativeThrowProvider[F] { implicit protected def mt: MonadThrow[F] override implicit protected def at: ApplicativeError[F] = mt } trait LoggingProvider[F[_]] extends MonadThrowProvider[F] with StrictLogging trait LoggedItemDaoWrapper[F[_]] extends ItemDao[F] with LoggingProvider[F] { abstract override def upsert(item: Item): F[Unit] = { super.upsert(item).attemptTap(...) } abstract override def get(id: Id): F[Option[Item]] = { super.get(id).attemptTap(...) } } Composing all providers into an all-in-one provider might be a good idea to reduce boilerplate in the initialization code. trait AllInOneProvider[F[_]] extends MonadThrowProvider[F] with ConcurrentProvider[F] with TimerProvider[F] with ClockProvider[F] with PrometheusGaugeProvider { override def mt: MonadThrow[F] = async override def concurrent: Concurrent[F] = async override def timer: Timer[F] = _timer override def clock: Clock[F] = _clock override def gauge: Gauge = methodCallGauge } val itemDao: ItemDao[F] = new ItemDaoImpl[F](...) extends LoggedItemDaoWrapper[F] with MeteredItemDaoWrapper[F] with TimeoutItemDaoWrapper[F] with AllInOneProvider[F] We managed to hide all the ugly stuff behind AllInOneProvider trait and provider traits, but it\u0026rsquo;s hard to reason about provided dependencies and their initialization.\nInitialization of components itself looks clean, but there\u0026rsquo;s a strong feeling that Tagless Final went wrong and functional code shouldn\u0026rsquo;t be written this way.\nClassic wrapper class Writing a wrapper using a class is a standard way of doing it in OOP languages. The question is how well it is able to handle Tagless Final.\nLet\u0026rsquo;s take a look at how would wrappers look with plain, Future, and F[_] values. class LoggedItemDaoWrapper(itemDao: ItemDao) extends ItemDao with StrictLogging { override def upsert(item: Item): Unit = { logger.info(s\u0026#34;upsert($item) is called\u0026#34;) itemDao.upsert(item) logger.info(s\u0026#34;upsert($item) = ()\u0026#34;) } override def get(id: Id): Option[Item] = { logger.info(s\u0026#34;get($id) is called\u0026#34;) val result = itemDao.get(id) logger.info(s\u0026#34;get($id) = $result\u0026#34;) } } class LoggedItemDaoWrapper(itemDao: ItemDao)(implicit ec: ExecutionContext) extends ItemDao with StrictLogging { override def upsert(item: Item): Future[Unit] = { itemDao.upsert(item).map(_ =\u0026gt; logger.info(s\u0026#34;upsert($item) = ()\u0026#34;)) } override def get(id: Id): Future[Option[Item]] = { super.get(id).map(result =\u0026gt; logger.info(s\u0026#34;get($id) = $result\u0026#34;)) } } class LoggedItemDaoWrapper[F[_]: MonadThrow](itemDao: ItemDao[F]) extends ItemDao[F] with StrictLogging { override def upsert(item: Item): F[Unit] = { itemDao.upsert(item).attemptTap(...) } override def get(id: Id): F[Option[Item]] = { itemDao.get(id).attemptTap(...) } } Looks nice! Easy to read even with Tagless Final approach. But what about initialization?\nWell, having a constructor and implicit parameters reduces boilerplate significantly, composition instead of inheritance makes outcome easier to understand and control.\nval itemDao: ItemDao[F] = new TimeoutItemDaoWrapper[F](timeoutsConfig)( new MeteredItemDaoWrapper[F](gauge)( new LoggedItemDaoWrapper[F]( new ItemDaoImpl[F](...) ) ) ) Syntactic sugar for class wrappers Although initialization is in reverse order (compared to mixins) might be confusing.\nWith the power of Scala implicits, it is pretty easy to make code look like trait mixins are being added to a class.\nimplicit class WrapperHelper[A](private val a: A) extends AnyVal { def `with`[B \u0026gt;: A](wrap: A =\u0026gt; B): B = wrap(a) } Adding with extension method is helpful if you have to migrate your code from trait mixins or prefer to have a code with direct wrapping order to avoid confusion.\nTo achieve the best readability, make sure that wrappers have a companion with apply function with dependencies listed before to-be-wrapped class and that dependencies and class are separated with curring. class Wrapper[F[_]: TC1: TC2](dep1: Dep1, dep2: Dep2[F], o: MyClass[F]) extends MyClass[F] { ... } object Wrapper { def apply[F[_]: TC1: TC2](dep1: Dep1, dep2: Dep2[F])(o: MyClass[F]) = new Wrapper(dep1, dep2, o) } So initialization code will look like this: myClassImpl .`with`(Wrapper1(dep1, dep2)) .`with`(Wrapper2(dep3))\nTofu Mid Tofu is a scala library made by Tagless Final enthusiasts that boosts TF experience to new levels. It has many features worth checking out, but the feature we need for wrappers is Mid.\nMid is not an easy abstraction to understand. It is even harder to understand the deriving mechanism of type class ApplyK.\nNevertheless, it doesn\u0026rsquo;t make it hard to use. Mid is a function from the result of the original method to the result of the same type: F[A] =\u0026gt; F[A].\n@derive(applyK) trait ItemDao[F[_]] { def upsert(item: Item): F[Unit] def get(id: Id): F[Option[Item]] } class LoggingItemDaoWrapper[F[_]: Sync] extends ItemDao[Mid[F, *]] with StrictLogging { // Effectful logging. You might want to use Tofu Logging instead or just impure logging. private def info(str: String): F[Unit] = Sync[F].delay(logger.info(str)) override def upsert(item: Item): Mid[F, Unit] = { upsert =\u0026gt; info(s\u0026#34;upserting $item\u0026#34;) *\u0026gt; upsert \u0026lt;* info(s\u0026#34;upsert of $item is successful\u0026#34;) } override def get(id: Id): Mid[F, Option[Item]] = { get =\u0026gt; info(s\u0026#34;getting $id\u0026#34;) *\u0026gt; get.flatTap(result =\u0026gt; info(s\u0026#34;get of $id is successful = $result\u0026#34;)) } } class TimeoutItemDaoWrapper[F[_]: Concurrent](timeoutValue: FiniteDuration) (implicit timer: Timer[F]) extends ItemDao[Mid[F, *]] { override def upsert(item: Item): Mid[F, Unit] = _.timeout(timeoutValue) override def get(id: Id): Mid[F, Option[Item]] = _.timeout(timeoutValue) } class NoOpItemDaoWrapper[F[_]] extends ItemDao[Mid[F, *]] { override def upsert(item: Item): Mid[F, Unit] = identity override def get(id: Id): Mid[F, Option[Item]] = identity } val service = new ItemDaoImpl[F](...) val logging = new LoggingItemDaoWrapper[F] val timeouts = new TimeoutItemDaoWrapper[F](timeoutValue) val noop = new NoOpItemDaoWrapper[F] // Execution order: // logging before // timeouts before // noop before // original method // noop after // timeouts after // logging after (logging |+| timeouts |+| noop).attach(service) As you can see code looks very clean without a need to pass arguments to the original method and make a call of it. While using Mid we\u0026rsquo;re manipulating with\nBut internal mechanism of Mid may not be clear.\nTo put things simple, all the mid wrappers are composed like mid2.andThen(mid1) and method call chain in composite wrapper looks like x =\u0026gt; mid1.myMethod(mid2.myMethod(x)), where x is an effect of the original myMethod, like F[Option[Item]] After composition, Mid wrapper attaches to implementation. Attachment means application of implementation to a wrapper and as a result it returns wrapped instance of a class: compositeMid.apply(impl).\nSo basically, when you introduce a class with a type like ItemDao[Mid[F, *]], you introduce a wrapper, because Mid effect is a wrapper effect on type level.\nUnfortunately, Tofu Mid usability is limited to Tagless Final algebras due to ApplyK magic.\nKiller feature of inheritance-based wrapping (trait mixins) The killer feature of inheritance-based wrappers is that inner calls of public methods are calling wrapped versions of methods. In case of composition-based wrappers, if public method is called inside implementation then unwrapped version of it will be called.\nBelow, I wrote an example that will highlight described problem.\nCode example\rtrait Printer { def print(): Unit def threeTimesPrint(): Unit } trait LoggedPrinter extends Printer { abstract override def print(): Unit = { println(\u0026#34;Print method is called\u0026#34;) super.print() } abstract override def threeTimesPrint(): Unit = { println(\u0026#34;ThreeTimesPrint method is called\u0026#34;) super.threeTimesPrint() } } class LoggedPrinter2(printer: Printer) extends Printer { override def print(): Unit = { println(\u0026#34;Print method is called\u0026#34;) printer.print() } override def threeTimesPrint(): Unit = { println(\u0026#34;ThreeTimesPrint method is called\u0026#34;) printer.threeTimesPrint() } } class PrinterImpl() extends Printer { override def print() = println(\u0026#34;A\u0026#34;) override def threeTimesPrint() = 1.to(3).foreach(_ =\u0026gt; print()) } // Output: // ThreeTimesPrint method is called // Print method is called // A // Print method is called // A // Print method is called // A (new PrinterImpl() with LoggedPrinter).threeTimesPrint() // Output: // ThreeTimesPrint method is called // A // A // A (new LoggedPrinter2(new PrinterImpl())).threeTimesPrint() Pros and Cons At the end of the article, it might seem that choice is clear, however after digging into details, many limitations and downsides are found.\nTrait mixin Pros:\n+ Saves specific type after wrapping. new ItemDaoImpl(...) extends LoggedItemDao has type ItemDaoImpl with LoggedItemDao. So it is possible to use any methods from ItemDaoImpl.\n+ Only those methods that are to be wrapped need to be present in wrappers. If you have a trait with 10 methods but want to add logging to one of them, then only one abstract override of the method needs to be written in a mixin.\n+ Is able to do wrapped inner calls of public methods. + Doesn\u0026rsquo;t require any libraries to use.\n+ Well explained in scala books.\nCons:\n- Providing dependencies creates a lot of boilerplate.\n- Wrapping uses an inheritance mechanism. The order of initialization may not be clear.\n- Might lead to NPEs during initialization.\n- Looks ugly with Tagless Final.\nClassic wrapper class Pros:\n+ Easy-to-understand GOF pattern from OOP languages.\n+ Doesn\u0026rsquo;t get complicated no matter how many wrappers are composed.\n+ It\u0026rsquo;s possible to make initialization look like with mixins.\n+ Easy to use with Tagless Final.\n+ Doesn\u0026rsquo;t require any libraries to use.\nCons:\n- All the methods of a trait have to be overridden in a wrapper.\n- StrictLogging gets wrapper class instead of implementation by default. It makes it hard to find the source of log in case where wrapper is used for many implementations.\n- A wrapper loses implementation type after wrapping making it impossible to call methods specific to the implementation. - Is only able to unwrapped inner calls of public methods.\nTofu Mid Pros:\n+ No need to call an original method directly. Less boilerplate.\n+ Has DSL for initialization that is easy to use.\nCons:\n- ApplyK cannot be derived if at least one of the methods returns anything other than F[...]. So it won\u0026rsquo;t be derived if a trait has a constant method like def groupId: String or a method that returns fs2.Stream.\n- Mid usage is limited to TF algebras and only to them. - The annotation that derives ApplyK has to be added to a class or has to be derived manually. - One type parameter type has to be introduced to do initialization. It won\u0026rsquo;t work automatically with type KVDao[F[_], K, V] or similar.\n- All the methods of a trait have to be overridden in a wrapper. It\u0026rsquo;s much easier with Mid than with classic wrappers. Just use x =\u0026gt; x or in other words identity is enough.\n- The same problem with StrictLogging as for classic wrapper class. Tofu provides Logging type class but its implementation is too specific.\n- A class that is wrapped with Mid wrapper loses original implementation type (the same as classic wrapper). Methods that are available only in implementation are unavailable after wrapping. - Is only able to unwrapped inner calls of public methods.\nConclusion Although usage of Mid reduces boilerplate in wrappers it adds boilerplate in ApplyK derivation and temporary one type parameter introduction cases.\nThe usability of Mid is very limited and cannot be used as a universal wrapping approach unless you have an ideal Tagless Final application which is a rare thing in reality.\nI\u0026rsquo;d recommend using classic wrapper classes as it is a readable and easy-to-understand solution, but unabilty to call wrapped methods inside implementation might be a huge downside sometimes.\n","permalink":"https://awethon.github.io/posts/scala-wrappers/","summary":"The wrapper pattern (or the proxy pattern) is a useful way of adding extra logic to the methods of a class without changing it. It might be handy in scenarios where an application needs to be heavily instrumented and putting all the instrumentation in business logic will make code less readable. To be more specific, wrappers are useful for logging, metering, and tracing, but not limited to it. For example, it might be useful to set timeouts and retries in wrappers.","title":"Different ways to implement wrappers in Scala"}]