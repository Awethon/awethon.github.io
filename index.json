[{"content":"The wrapper pattern is useful for adding extra logic to methods of a class: logging, metering, tracing, timeouts, retries. It helps to keep code clean and focused on business logic.\nScala is a great language and provides many ways to create wrappers. Maybe even too many.\nI\u0026rsquo;ve decided to create this article because it seems that there\u0026rsquo;s no consensus among Scala developers on how to write them and no clear understanding of downsides and limitations.\n Table of Contents  Trait mixin Classic wrapper class Tofu Mid Pros and Cons  Trait mixin Classic wrapper class Tofu Mid   Conclusion    Trait mixin One of the possible ways to create a wrapper is the trait mixin technique.\nLet\u0026rsquo;s introduce a simple trait to start with: trait ItemDao { def upsert(item: Item): Unit def get(id: Id): Option[Item] }\nTo write a mixin wrapper for ItemDao we need to create the trait that extends ItemDao interface and make an abstract override to change methods behavior.\ntrait LoggedItemDaoWrapper extends ItemDao with StrictLogging { abstract override def upsert(item: Item): Unit = { logger.info(s\u0026#34;upsert($item) is called\u0026#34;) super.upsert(item) logger.info(s\u0026#34;upsert($item) = ()\u0026#34;) } abstract override def get(id: Id): Option[Item] = { logger.info(s\u0026#34;get($id) is called\u0026#34;) val result = super.get(id) logger.info(s\u0026#34;get($id) = $result\u0026#34;) } } To make it work mixin wrapper should be mixed into implementation: new ItemDaoImpl(...) extends LoggedItemDaoWrapper\nSo far it looks nice and seems easy to understand.\nUnfortunately, things become messy if there are dependencies to provide.\nLet\u0026rsquo;s make our trait to have asynchronous interface: trait ItemDao { def upsert(item: Item): Future[Unit] def get(id: Id): Future[Option[Item]] } If a trait has an interface that returns scala.concurrent.Future, then ExecutionContext must be provided to our wrappers to be able to call map, flatMap, and other methods.\nMany developers create global single thread execution context to keep things simple, but let\u0026rsquo;s pretend I didn\u0026rsquo;t say that.\ntrait LoggedItemDaoWrapper extends ItemDao with StrictLogging { protected implicit def ec: ExecutionContext abstract override def upsert(item: Item): Future[Unit] = { super.upsert(item).map(_ =\u0026gt; logger.info(s\u0026#34;upsert($item) = ()\u0026#34;)) } abstract override def get(id: Id): Future[Option[Item]] = { super.get(id).map(result =\u0026gt; logger.info(s\u0026#34;get($id) = $result\u0026#34;)) } } val itemDao: ItemDao = new ItemDaoImpl(...) extends LoggedItemDaoWrapper { override def ec = yourEc } The code of initialization is not as clear as before because ExecutionContext has to be provided through the override def mechanism. Initialization order has to be kept in mind because it\u0026rsquo;s possible to get NullPointerException there.\nThe more dependencies are stacked together the worse the code looks.\nIt becomes even worse with Tagless Final. When we write wrappers using TF we want to keep granularity of type classes, but when it comes to initialization, we\u0026rsquo;re doomed because different wrappers require different type class instances to be provided as function definitions. Since a type class cannot be provided via context bounds, we have to use the same mechanism as shown before.\nHere\u0026rsquo;s an example of what TF code might look like:\ntrait ItemDao[F[_]] { def upsert(item: Item): F[Unit] def get(id: Id): F[Option[Item]] } trait LoggedItemDaoWrapper[F[_]] extends ItemDao[F] with StrictLogging { implicit protected def mt: MonadThrow[F] abstract override def upsert(item: Item): F[Unit] = { super.upsert(item).attemptTap(...) } abstract override def get(id: Id): F[Option[Item]] = { super.get(id).attemptTap(...) } } val itemDao: ItemDao[F] = new ItemDaoImpl[F](...) extends LoggedItemDaoWrapper[F] with MeteredItemDaoWrapper[F] with TimeoutItemDaoWrapper[F] { override def mt: MonadThrow[F] = async override def at: ApplicativeError[F] = async override def concurrent: Concurrent[F] = async override def timer: Timer[F] = _timer override def gauge: Gauge = methodCallGauge }  In order to reduce the amount of boilerplate and make sure dependencies names are the same for the same dependencies, type class provider traits have to be implemented.\ntrait MonadThrowProvider[F[_]] extends ApplicativeThrowProvider[F] { implicit protected def mt: MonadThrow[F] override implicit protected def at: ApplicativeError[F] = mt } trait LoggingProvider[F[_]] extends MonadThrowProvider[F] with StrictLogging trait LoggedItemDaoWrapper[F[_]] extends ItemDao[F] with LoggingProvider[F] { abstract override def upsert(item: Item): F[Unit] = { super.upsert(item).attemptTap(...) } abstract override def get(id: Id): F[Option[Item]] = { super.get(id).attemptTap(...) } } The composition of all providers into a super-provider might be a good idea to reduce boilerplate in the initialization code.\ntrait SuperProvider[F[_]] extends MonadThrowProvider[F] with ConcurrentProvider[F] with TimerProvider[F] with ClockProvider[F] with PrometheusGaugeProvider { override def mt: MonadThrow[F] = async override def concurrent: Concurrent[F] = async override def timer: Timer[F] = _timer override def clock: Clock[F] = _clock override def gauge: Gauge = methodCallGauge } val itemDao: ItemDao[F] = new ItemDaoImpl[F](...) extends LoggedItemDaoWrapper[F] with MeteredItemDaoWrapper[F] with TimeoutItemDaoWrapper[F] with SuperProvider[F] We managed to hide all the ugly stuff behind SuperProvider trait and provider traits, but it\u0026rsquo;s hard to reason about provided dependencies and their initialization.\nInitialization of components themselves looks clean, but there\u0026rsquo;s a strong feeling that Tagless Final went wrong and code shouldn\u0026rsquo;t be written this way.\nClassic wrapper class Writing a wrapper via class is a standard way of doing it in OOP languages. The question is how well it is able to handle Tagless Final.\nI\u0026rsquo;ll write all three versions together since they look very similar: class LoggedItemDaoWrapper(itemDao: ItemDao) extends ItemDao with StrictLogging { override def upsert(item: Item): Unit = { logger.info(s\u0026#34;upsert($item) is called\u0026#34;) itemDao.upsert(item) logger.info(s\u0026#34;upsert($item) = ()\u0026#34;) } override def get(id: Id): Option[Item] = { logger.info(s\u0026#34;get($id) is called\u0026#34;) val result = itemDao.get(id) logger.info(s\u0026#34;get($id) = $result\u0026#34;) } } class LoggedItemDaoWrapper(itemDao: ItemDao)(implicit ec: ExecutionContext) extends ItemDao with StrictLogging { override def upsert(item: Item): Future[Unit] = { itemDao.upsert(item).map(_ =\u0026gt; logger.info(s\u0026#34;upsert($item) = ()\u0026#34;)) } override def get(id: Id): Future[Option[Item]] = { super.get(id).map(result =\u0026gt; logger.info(s\u0026#34;get($id) = $result\u0026#34;)) } } class LoggedItemDaoWrapper[F[_]: MonadThrow](itemDao: ItemDao[F]) extends ItemDao[F] with StrictLogging { override def upsert(item: Item): F[Unit] = { itemDao.upsert(item).attemptTap(...) } override def get(id: Id): F[Option[Item]] = { itemDao.get(id).attemptTap(...) } } Looks nice! Easy to read even with Tagless Final approach. But what about initialization?\nWell, implicits reduce boilerplate significantly, composition instead of inheritance makes dependencies easy to reason about.\nval itemDao: ItemDao[F] = new TimeoutItemDaoWrapper[F](timeoutsConfig)( new MeteredItemDaoWrapper[F](gauge)( new LoggedItemDaoWrapper[F]( new ItemDaoImpl[F](...) ) ) ) Although initialization is in reverse order (compared to mixins) might be confusing.\nWith the power of Scala implicits, it is pretty easy to make code look like mixins are being added to a class.\nimplicit class WrapperHelper[A](private val a: A) extends AnyVal { def `with`[B \u0026gt;: A](wrap: A =\u0026gt; B): B = wrap(a) } I think it\u0026rsquo;s a great and simple solution that helps to migrate from mixins smoothly. To achieve the best result, make sure that wrappers have a companion with apply function with dependencies listed before to-be-wrapped class and that dependencies and class are separated with curring e.g. class Wrapper[F[_]: TC1: TC2](dep1: Dep1, dep2: Dep2[F])(o: MyClass[F]) extends MyClass[F] { ... } So initialization code will look like this: myClassImpl .`with`(Wrapper1(dep1, dep2)) .`with`(Wrapper2(dep3))\nTofu Mid Tofu is a scala library made by Tagless Final enthusiasts that boosts TF experience to new levels. It has many features worth checking out, but the feature we need for wrappers is Mid.\nMid is not an easy abstraction to understand. It is even harder to understand the deriving mechanism of type class ApplyK.\nNevertheless, it doesn\u0026rsquo;t make it hard to use. Mid is a function from the result of the original method to the result of the same type: F[A] =\u0026gt; F[A].\n@derive(applyK) trait ItemDao[F[_]] { def upsert(item: Item): F[Unit] def get(id: Id): F[Option[Item]] } class LoggingItemDaoWrapper[F[_]: Sync] extends ItemDao[Mid[F, *]] with StrictLogging { private def info(str: String): F[Unit] = Sync[F].delay(logger.info(str)) override def upsert(item: Item): Mid[F, Unit] = { upsert =\u0026gt; info(s\u0026#34;upserting $item\u0026#34;) *\u0026gt; upsert \u0026lt;* info(s\u0026#34;upsert of $itemis successful\u0026#34;) } override def get(id: Id): Mid[F, Option[Item]] = { get =\u0026gt; info(s\u0026#34;getting $id\u0026#34;) *\u0026gt; get.flatTap(result =\u0026gt; info(s\u0026#34;get of $idis successful = $result\u0026#34;)) } } class TimeoutItemDaoWrapper[F[_]: Concurrent](timeoutValue: FiniteDuration)(implicit timer: Timer[F]) extends ItemDao[Mid[F, *]] { override def upsert(item: Item): Mid[F, Unit] = _.timeout(timeoutValue) override def get(id: Id): Mid[F, Option[Item]] = _.timeout(timeoutValue) } class NoOpItemDaoWrapper[F[_]] extends ItemDao[Mid[F, *]] { override def upsert(item: Item): Mid[F, Unit] = identity override def get(id: Id): Mid[F, Option[Item]] = identity } val service = new ItemDaoImpl[F](...) val logging = new LoggingItemDaoWrapper[F] val timeouts = new TimeoutItemDaoWrapper[F](timeoutValue) val noop = new NoOpItemDaoWrapper[F] // logging before // timeouts before // noop before // original method // noop after // timeouts after // logging after (logging |+| timeouts |+| noop).attach(service) As you can see code looks very clean without a need to pass arguments to the original method. But internal mechanism of Mid may not be clear.\nTo put things simple, all the mid wrappers are composed like mid3.andThen(mid2).andThen(mid1) and method call chain in composite wrapper looks like x =\u0026gt; mid1.method(mid2.method(mid3.method(x))). After composition, Mid wrapper attaches to implementation which is application of implementation to a wrapper that returns wrapped instance of a class: compositeMid.apply(impl).\nSo basically, when you introduce a type like ItemDao[Mid[F, *]], you introduce a wrapper.\nUnfortunately, Tofu Mid usage is limited to Tagless Final algebras due to ApplyK magic.\nPros and Cons At the end of the article, it might seem that choice is clear, however after digging into details, many limitations and downsides are found.\nTrait mixin Pros:\n+ Saves specific type after wrapping. new ItemDaoImpl(...) extends LoggedItemDao has type ItemDaoImpl with LoggedItemDao. So it is possible to use any methods from ItemDaoImpl.\n+ Only those methods that are to be wrapped need to be present in wrappers. If you have a trait with 10 methods but want to add logging to one of them, then only one abstract override of the method needs to be written in a mixin.\n+ Doesn\u0026rsquo;t require any libraries to use.\n+ Well explained in scala books.\nCons:\n- Providing dependencies creates a lot of boilerplate.\n- Wrapping uses an inheritance mechanism. The order of initialization may not be clear.\n- Might lead to NPEs during initialization.\n- Looks ugly with Tagless Final.\nClassic wrapper class Pros:\n+ Easy to understand GOF pattern from OOP languages.\n+ Doesn\u0026rsquo;t get complicated no matter how many wrappers are composed.\n+ It\u0026rsquo;s possible to make initialization look like with mixins.\n+ Easy to use with Tagless Final.\n+ Doesn\u0026rsquo;t require any libraries to use.\nCons:\n- All the methods of a trait have to be overridden in a wrapper. - StrictLogging gets wrapper class instead of implementation by default. It makes it hard to find the source of log in case where wrapper is used for many implementations.\n- A wrapper loses implementation type after wrapping making it impossible to call methods specific to the implementation.\nTofu Mid Pros:\n+ No need to call an original method directly. Less boilerplate.\n+ Has dsl for initialization that is easy to use.\nCons:\n- The same problem with StrictLogging as for classic wrapper class. Tofu provides Logging type class but its implementation is too specific.\n- Mid wrapper also loses original type.\n- Even though all the methods of a trait have to be overridden, it\u0026rsquo;s much easier with mid. x =\u0026gt; x or in other words identity is enough.\n- One type parameter type has to be introduced to do initialization. It won\u0026rsquo;t work automatically with type KVDao[F[_], K, V] or similar.\n- The annotation that derives ApplyK has to be added to a class or has to be derived manually.\n- ApplyK cannot be derived if at least one of the methods returns anything other than F[\u0026hellip;]. So it won\u0026rsquo;t be derived if a trait has a constant method like def groupId: String or a method that returns fs2.Stream.\n- Mid usage is limited to TF algebras and only to them.\nConclusion Although usage of Mid reduces boilerplate in wrappers it adds boilerplate in ApplyK derivation and temporary one type parameter introduction cases.\nUsage of Mid is very limited and cannot be used as a universal wrapping approach unless you have an ideal Tagless Final application which is a rare thing in reality.\nI would personally recommend using classic wrapper classes.\n","permalink":"http://awethon.github.io/posts/scala-wrappers/","summary":"The wrapper pattern is useful for adding extra logic to methods of a class: logging, metering, tracing, timeouts, retries. It helps to keep code clean and focused on business logic.\nScala is a great language and provides many ways to create wrappers. Maybe even too many.\nI\u0026rsquo;ve decided to create this article because it seems that there\u0026rsquo;s no consensus among Scala developers on how to write them and no clear understanding of downsides and limitations.","title":"Different ways to implement wrappers in Scala 2.x"}]