<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scala on Awethon&#39;s Page</title>
    <link>http://awethon.github.io/tags/scala/</link>
    <description>Recent content in scala on Awethon&#39;s Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Dec 2021 21:55:20 +0300</lastBuildDate><atom:link href="http://awethon.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Different ways to make AOP in Scala 2.x</title>
      <link>http://awethon.github.io/posts/scala-aop/</link>
      <pubDate>Sun, 12 Dec 2021 21:55:20 +0300</pubDate>
      
      <guid>http://awethon.github.io/posts/scala-aop/</guid>
      <description>Let&amp;rsquo;s imagine that we have the trait that defines an interface for ItemDao: trait ItemDao { def upsert(item: Item): Unit def get(id: Id): Option[Item] }
One of the possible ways to do AOP is trait mixins. We just make a trait that calls parent implementation of a method, and then we write our code before and after it.
trait LoggedItemDaoAspect extends ItemDao with StrictLogging { abstract override def upsert(item: Item): Unit = { logger.</description>
    </item>
    
  </channel>
</rss>
